name: Deploy to Remote Server

on:
  workflow_dispatch:
    inputs:
      container-name:
        description: "Container name on Remote Server (DEFAULT tssl_sample_srv)"
        required: true
        default: "tssl_sample_srv"
      remote_port:
        description: "Remote Server Port (DEFAULT 7210)"
        required: true
        default: "7210"
      bl_srv_token:
        description: "Taleworld Token from Console Command (DEFAULT BL_SRV_TOKEN from secrets)"
        required: false
      server-config-file:
        description: "Server configuration file to use (DEFAULT server.cfg)"
        required: false
        default: "server.cfg"
      docker_image:
        description: "Docker image to deploy (DEFAULT tssl)"
        required: true
        default: "tssl"
      docker_image_version:
        description: "Docker image version to deploy (DEFAULT latest)"
        required: true
        default: "latest"

jobs:
  pull-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.REMOTE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.REMOTE_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy on Remote Server
      run: |
        ssh -T -i ~/.ssh/id_rsa ${{ secrets.REMOTE_SERVER_USER }}@${{ secrets.REMOTE_SERVER_IP }} << EOF
        # Disable 'set -e' for more control
        set +e

        echo "Determine BL_SRV_TOKEN"
        if [ -z "${{ github.event.inputs.bl_srv_token }}" ]; then
          echo "Secret BL_SRV_TOKEN found and pulled for deployment"
          export BL_SRV_TOKEN=${{ secrets.BL_SRV_TOKEN }}
        else
          echo "Input BL_SRV_TOKEN found and taken for deploymentt"
          export BL_SRV_TOKEN=${{ github.event.inputs.bl_srv_token }}
        fi

        echo "Logging into Docker..."
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
        echo "Pulling Docker image..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.docker_image }}:${{ github.event.inputs.docker_image_version }}
        
        echo "Stopping existing container (if any)..."
        docker stop ${{ github.event.inputs.container-name }} || true
        docker rm ${{ github.event.inputs.container-name }} || true
        
        echo "Starting new Docker container..."
        docker run -d \ 
          --name ${{ github.event.inputs.container-name }} \
          -p ${{ github.event.inputs.remote_port }}:7210/tcp \ 
          -p ${{ github.event.inputs.remote_port }}:7210/udp \
          -e BL_SRV_TOKEN=$BL_SRV_TOKEN \
          -e BL_SRV_CONFIG=${{ github.event.inputs.server-config-file }} \
          ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.docker_image }}:${{ github.event.inputs.docker_image_version }}
        
        echo "Checking running containers..."
        docker ps
        
        echo "Deployment completed successfully."
        EOF
