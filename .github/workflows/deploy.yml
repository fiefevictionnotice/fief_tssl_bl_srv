name: Deploy to Remote Server

on:
  workflow_dispatch:
    inputs:
      instance-id:
        description: "Remote Server Instance Id"
        required: true
      docker-image-version:
        description: "Docker Image Version"
        required: true
        default: "latest"

jobs:
  pull-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Extract secrets from JSON
      - name: Extract secrets from JSON
        run: |
          # Fetch the JSON secret and parse it with jq
          deployment_config="${{ secrets.SERVER_DEPLOYMENT_CONFIG }}"
          instance_id="${{ github.event.inputs.instance-id }}"
          
          # Extract the specific instance secrets from the JSON object
          REMOTE_SSH_KEY=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SSH_KEY")
          REMOTE_SERVER_IP=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SERVER_IP")
          REMOTE_SERVER_USER=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SERVER_USER")

          # Set these as GitHub environment variables
          echo "REMOTE_SSH_KEY=$REMOTE_SSH_KEY" >> $GITHUB_ENV
          echo "REMOTE_SERVER_IP=$REMOTE_SERVER_IP" >> $GITHUB_ENV
          echo "REMOTE_SERVER_USER=$REMOTE_SERVER_USER" >> $GITHUB_ENV

      # Step 2: Set up SSH
      - name: Set up SSH
        run: |
          # Ensure the ~/.ssh directory exists
          mkdir -p ~/.ssh
          
          # Place the SSH private key into the id_rsa file
          echo "$REMOTE_SSH_KEY" > ~/.ssh/id_rsa
          
          # Set proper permissions on the private key
          chmod 600 ~/.ssh/id_rsa
          
          # Scan the remote server's SSH key and add it to known_hosts
          ssh-keyscan -H "$REMOTE_SERVER_IP" >> ~/.ssh/known_hosts

          echo "SSH setup completed for $REMOTE_SERVER_USER@$REMOTE_SERVER_IP"

      # Step 3: Deploy on Remote Server
      - name: Deploy on Remote Server
        run: |
          # Ensure SSH key is available
          mkdir -p ~/.ssh
          echo "$REMOTE_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$REMOTE_SERVER_IP" >> ~/.ssh/known_hosts

          # SSH into the remote server to deploy
          ssh -T -i ~/.ssh/id_rsa "$REMOTE_SERVER_USER"@"$REMOTE_SERVER_IP" << EOF
          # Disable 'set -e' for more control
          set +e

          echo "Logging into Docker..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          echo "Pulling Docker image..."
          docker pull "${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.DOCKER_REPOSITORY }}:${{ github.event.inputs.docker }}"

          echo "Stopping existing container (if any)..."
          docker stop "${{ github.event.inputs.container-name }}" || true
          docker rm "${{ github.event.inputs.container-name }}" || true

          echo "Starting new Docker container..."
          docker run -d \
            --name "${{ github.event.inputs.container-name }}" \
            -p "$REMOTE_PORT:7210/tcp" \
            -p "$REMOTE_PORT:7210/udp" \
            -e BL_SRV_TOKEN=$BL_SRV_TOKEN \
            -e BL_SRV_CONFIG=$SERVER_CFG_FILE \
            "${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.DOCKER_REPOSITORY }}:${{ github.event.inputs.docker-image-version }}"

          echo "Checking running containers..."
          docker ps

          echo "Deployment completed successfully."
          EOF
