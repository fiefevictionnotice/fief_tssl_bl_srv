name: Extract Secrets and Set Up SSH

on:
  workflow_call:
    inputs:
      instance-id:
        description: "Remote Server Instance Id"
        type: string
        required: true

jobs:
  extract-and-setup:
    runs-on: ubuntu-latest

    steps:
      - name: Extract secrets from JSON
        run: |
          # Fetch the JSON secret and parse it with jq
          deployment_config="${{ secrets.DEPLOYMENT_CONFIG }}"
          instance_id="${{ inputs.instance-id }}"

          # Extract the specific instance secrets from the JSON object
          REMOTE_SSH_KEY=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SSH_KEY")
          REMOTE_SERVER_IP=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SERVER_IP")
          REMOTE_SERVER_USER=$(echo "$deployment_config" | jq -r ".\"$instance_id\".REMOTE_SERVER_USER")

          # Decode the SSH key from base64
          REMOTE_SSH_KEY=$(echo "$REMOTE_SSH_KEY" | base64 --decode)
          
          # Set these as GitHub environment variables
          echo "REMOTE_SSH_KEY=$REMOTE_SSH_KEY" >> $GITHUB_ENV
          echo "REMOTE_SERVER_IP=$REMOTE_SERVER_IP" >> $GITHUB_ENV
          echo "REMOTE_SERVER_USER=$REMOTE_SERVER_USER" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          # Ensure the ~/.ssh directory exists
          mkdir -p ~/.ssh
          
          # Place the SSH private key into the id_rsa file
          echo "$REMOTE_SSH_KEY" > ~/.ssh/id_rsa
          
          # Set proper permissions on the private key
          chmod 600 ~/.ssh/id_rsa
          
          # Scan the remote server's SSH key and add it to known_hosts
          ssh-keyscan -H "$REMOTE_SERVER_IP" >> ~/.ssh/known_hosts

          echo "SSH setup completed for $REMOTE_SERVER_USER@$REMOTE_SERVER_IP"
